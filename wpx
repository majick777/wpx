#!/bin/bash

# ================================ #
# === WPX - WP CLI Multiplied! === #
# ================================ #
# ========= Version 1.0.0 ======== #
# ================================ #

# "You'll see your commands multiplied, if you continually decide, 
# to faithfully pursue, the policy of root."

# WPX Home: http://wpmedic.tech/wpx/
# WPX GitHub: https://github.com/majick777/wpx/

# WP CLI Home: http://wp-cli.org/
# WP CLI Command Reference: https://developer.wordpress.org/cli/commands/


# ============
# INSTALLATION
# ============
# 0. (Install WP CLI if not already installed. http://wp-cli.org/) 
# 1. Copy wpx to /usr/local/bin/ (or other environment path used)
# 2. chmod +x /usr/local/bin/wpx (or other environment path used)
# 3. Create a sites.conf in ~/.wp-cli/ (or environment path used)

# See sites.sample.conf, format is one site per line:
# site-slug user:group /full/path/to/wordpress/install/
# -- wp CLI commands will run using 'sudo -u user with the user specified !
# -- providing :group is optional, and only used with check/fix file owners commands
# -- site paths prefixed with * will use immutable core locking (see later explanation)

# [Optional] Create sources.conf in the same directory as the wpx file
# These are for use with all the "sync" ACTION commands listed below.
# See sources.sample.conf, format is one source per line:
# type source-slug /full/source/path/
# -- where 'type' is either: plugin, theme, core, muplugin or file


# ========
# UPDATING
# ========
# Simply repeat step 1 to copy over the existing wpx file
# (If you deleted wpx you will need to repeat step 2 to ensure it is executable.)


# =====
# USAGE
# =====
# wpx COMMAND SITE(S) SLUG(S)
#
# where COMMAND is a command from the action list below.
# and SITE(S) is a site reference slug defined in sitepath.conf (may be a comma-separated list)
# - note: if a value of "all" is specified, the COMMAND will be run on EVERY site in sites.conf!
# and SLUG(S) is an optional reference to theme or plugin slugs (may be a comma-separated list)


# ========
# COMMANDS
# ========
# Note: [SYNC] commands use sources defined in sources.conf, all others use WordPress repository sources.
#
# [CORE]	checkversion		Check installed WP Core version(s) on the SITE(S) specified
#		updatecore		Update to latest WP Core(s) on SITE(S) (version argument optional)
#		verifycore		Verify WP Core(s) Checksums on SITE(S) (requires no WP errors)
#		reinstallcore		Reinstall WP Core(s) on SITE(S)
#		lockcore		Add the immutable lock to WP Core(s) files on SITE(S)
#		unlockcore		Removes immutable lock from WP Core files on SITE(S)
#		checklock		Checks immutable switch on all WP Core files on SITE(S)
#		checkowners		Checks all file owner/group match those in sites.conf on SITE(S)
#		fixowners		Change all file owner/group to those in sites.conf on SITE(S)
# [PLUGIN]	checkplugin		Check plugin(s) SLUG(S) for SITE(S) - status, version, updates
#		listplugins		Now an alias of checkplugin (re-formatted table list)
#		activateplugin		Activate plugin(s) SLUG(S) for SITE(S)
#		deactivateplugin	Deactivate plugin(s) SLUG(S) for SITE(S)
#		installplugin		Install plugin(s) SLUG(S) for SITE(S)
#		installactivateplugin	Install and Activate plugin(s) SLUG(S) for SITE(S)
#		reinstallplugin		Reinstall plugin(s) SLUG(S) for SITE(S)
#		updateplugin		Update plugin(s) SLUG(S) for SITE(S)
#		updateallplugins	Update ALL plugins for SITE(S)
#		deleteplugin		Deletes plugin(s) SLUG(S) for SITE(S)
# [THEME]	listthemes		List installed themes on SITE(S)
#		checktheme		Check active child and parent themes versions on SITE(S)	
#		activatetheme		Activate theme SLUG for SITE(S)
#		installtheme		Install theme SLUG for SITE(S)
#		installactivatetheme	Install and Activate theme SLUG for SITE(S)
#		reinstalltheme		Reinstall theme SLUG for SITE(S)
#		updatetheme		Update theme SLUG for SITE(S)
# [SYNC]	synccore		Sync core SLUG for SITE(S) using sources.conf
#		syncplugin		Sync plugin SLUG(S) for SITE(S) using sources.conf
#		syncactivateplugin	Sync and activate plugin SLUG(S) for SITE(S) using sources.conf
#		synctheme		Sync theme SLUG for SITE(S) using sources.conf
#		syncactivatetheme	Sync and activate theme SLUG for SITE(S) using sources.conf
#		syncmuplugin		Sync must-use plugin SLUG(S) for SITE(S) using sources.conf
#		syncfile		Sync root-relative file SLUG for SITE(S) using sources.conf
#		
# Note: For ease of use, MOST singular plugin and theme commands will also work in plural form:
# [PLUGIN]	checkplugins, activateplugins, deactivateplugins, installplugins, installactivateplugins, reinstallplugins, updateplugins
# [THEME]	checkthemes, installthemes, reinstallthemes, updatethemes (but NOT activatethemes or installactivatethemes)
# [SYNC]	syncplugins, syncactivateplugins, syncthemes, syncmuplugins, syncfiles (but NOT syncactivatethemes)


# ---------------------------
# Immutable Core File Locking
# ---------------------------
# This is an optional extra security feature to help prevent hackers from rewriting any core WordPress files,
# as this is a common place to hide injected code after a hack. Making these files immutable (read-only) means
# that NO users can write to them (and only root user can remove the immutable flags.)
#
# Important Note: this feature does NOT affect plugin or theme files, ONLY WordPress core files.
# (Specifically, locking for all base files (wp-config.php etc.), and recursively for both /wp-admin and 
# /wp-includes directories - but not /wp-content or any of its subdirectories or files. So if you have
# core files in /wp-content/ (eg. wp-cache.php or db-error.php) you may want to lock these manually.)
#
# Of course, if you decide to make your core files read-only this way, you cannot run standard updates from 
# the WordPress admin interface or with standard WP CLI or any other standard way of triggering updates.
# This will mean you will need to run core updates via WPX - logged in as root user to 
# (Alternatively, unlock with WPX (as root), then update via whatever process, then relock with WPX.)
#
# To use this feature, simply prefix any sitepaths in sites.conf with * and run this lock the files:
# wpx lockcore mysiteslug
#
# WPX will attempt to unlock before and then relock after ANY core commands that it runs. 
# So for example, to update a site to the latest version, you can do simply:
# wpx updatecore mysiteslug
#
# This might seem like a hassle to begin with. BUT, do consider the advantage of not having writeable core 
# files..! It is two steps beyond simple file monitoring or integrity checking, as your core files simply 
# cannot be infected by malware, which is one less attack vector for hackers to use. :-)
# 
# Note: If for whatever reason you cannot use this feature, a similar method - but not *quite* as effective - 
# would be to use the wpx synccore command via a regular Cron job to overwrite any core file changes IF they
# happen. (This would mean keeping a core version source directory up-to-date to sync from.)
#
# Of course in any case, if you are working in a team, best to discuss these options before implementation!


# -----------------
# Development TODOs
# -----------------
# Ref: https://make.wordpress.org/cli/handbook/config/
# * set environment variable filepath for config.yml based on site slug (WP_CLI_CONFIG_PATH)
# -- do not set --path if src path is already set via config.yml ?
# * allow for use of @alias in combination with site slug ? 
#
# ? define SUCCESS value for updatecore and updateallplugins
# ? add downgradecore to WP version function ?
# ? add plugin and theme rollback functions ?
# ? handle alternate zip and http:// sources ? 


# ----- #
# SETUP #
# ----- #

# debug command output
set +x

# declare any globals
RESULT=""

# Colours
black() { printf "$(tput setaf 0)$*$(tput setaf 9)"; }
red() { printf "$(tput setaf 1)$*$(tput setaf 9)"; }
green() { printf "$(tput setaf 2)$*$(tput setaf 9)"; }
yellow() { printf "$(tput setaf 3)$*$(tput setaf 9)"; }
blue() { printf "$(tput setaf 4)$*$(tput setaf 9)"; }
magenta() { printf "$(tput setaf 5)$*$(tput setaf 9)"; }
cyan() { printf "$(tput setaf 6)$*$(tput setaf 9)"; }
white() { printf "$(tput setaf 7)$*$(tput setaf 9)"; }

# ------------------ #
# Valid Command List #
# ------------------ #
function validcommands {
	red "Valid Commands"; echo ":"
	printf "["; yellow "CORE"; echo "] checkversion, updatecore, verifycore, reinstallcore, lockcore, unlockcore, checklock, checkowners, fixowners"
	printf "["; yellow "PLUGIN"; echo "] checkplugins, activateplugin, deactivateplugin, installplugin, installactivateplugin, reinstallplugin, updateplugin, updateallplugins, deleteplugin"
	printf "["; yellow "THEME"; echo "] listthemes, checktheme, activatetheme, installtheme, installactivatetheme, reinstalltheme, updatetheme"
	printf "["; yellow "SYNC"; echo "] syncplugin, syncactivateplugin, syncmuplugin, synctheme, syncactivatetheme, syncmuplugin, syncfile"
}

# ------------ #
# Check Result #
# ------------ #
function checkresult {
	local OUTPUT=$1; local SUCCESS=$2; local TYPE=$3
	
	# TODO: set more "already done" strings ...
	if [ "$TYPE" == 'install' ]; then
		ALREADY="already installed"
	fi
	if [ "$TYPE" == 'activate' ]; then
		ALREADY="already activated"
	fi
	

	# TODO: if [[ "$OUTPUT" == *"Error"* ]]; then
	
		# if [[ "$OUTPUT" == *"PHP Parse Error"* ]]; then
		#	echo "";		
		# fi
	
		if [[ "$OUTPUT" == *"Error establishing a database connection"* ]]; then
			SILENT=$(service mysql restart)
			yellow "**"; echo " Restarted MySQL Server... Redoing..."
			RESULT="failed"
		fi
		
	# fi;
	
	# if [ -z "$SUCCESS ]"; then
		if [[ "$OUTPUT" == *"$SUCCESS"* ]]; then
			RESULT="success"
		else 
			if [[ "$OUTPUT" == *"$ALREADY"* ]]; then
				RESULT="success"
			else
				RESULT="failed"
			fi
		fi
	# fi
	
}


# ============= #
# CORE COMMANDS #
# ============= #

# ------------- #
# Check Version #
# ------------- #
function checkversion {
	
	# equivalent to: wp core version --path="$SITEPATH" but without using WP CLI
	local VERSIONPATH=$SITEPATH"wp-includes/version.php"
	local VERSION=$(grep "wp_version = " $VERSIONPATH | cut -d \' -f2)
	# TEST=$(grep "wp_version = " $VERSIONPATH | awk '{print $3}')
	green $SITENAME; printf " : WP "; yellow $VERSION; echo " ";

}

# ----------- #
# Verify Core #
# ----------- #
function verifycore {
	
	# equivalent to: wp core version --path="$SITEPATH"
	local VERSIONPATH=$SITEPATH"wp-includes/version.php"
	local VERSION=$(grep "wp_version = " $VERSIONPATH | cut -d \' -f2)
	
	yellow "***"; printf " Verifying core checksums for "; green "$SITENAME"; printf " (WP "; echo $VERSION")"
	OUTPUT=$(sudo -u "$SITEUSER" wp core verify-checksums --path="$SITEPATH" --version="$VERSION" --skip-plugins)
	
	# TODO: define SUCCESS (this command is too finnicky for this!)
	# $SUCCESS=""
	checkresult $OUTPUT
	if [ "$RESULT" == "failed" ]; then
		OUTPUT=$(sudo -u "$SITEUSER" wp core verify-checksums --path="$SITEPATH" --version="$VERSION")
	fi
	echo "$OUTPUT"
}

# ----------- #
# Update Core #
# ----------- #
function updatecore {
	
	local VERSION=$1
	
	# - maybe unlock core -
	if [ "$SITELOCKING" == "true" ]; then
		unlockcore
	fi
	
	# - attempt core update -
	# TODO: define SUCCESS here ?
	SUCCESS=""
	if [ -z "$VERSION" ]; then
		OUTPUT=$(sudo -u "$SITEUSER" wp core update --path="$SITEPATH" --skip-plugins)
	else
		OUTPUT=$(sudo -u "$SITEUSER" wp core update --path="$SITEPATH" --skip-plugins --version="$VERSION" --force)
	fi
	checkresult $OUTPUT $SUCCESS
	
	# - maybe try again -
	if [ "$RESULT" == "failed" ]; then
		if [ -z $VERSION ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp core update --path="$SITEPATH" --skip-plugins)
		else 
			OUTPUT=$(sudo -u "$SITEUSER" wp core update --path="$SITEPATH" --skip-plugins --version="$VERSION" --force)
		fi
	fi
	echo "$OUTPUT"
	
	# - maybe relock core -
	if [ "$SITELOCKING" == "true" ]; then
		lockcore
	fi
}

# -------------- #
# Reinstall Core #
# -------------- #
function reinstallcore {
	
	local VERSIONPATH=$SITEPATH"wp-includes/version.php"
	local NEWCOREPATH=$SITEPATH"core-update/"
	
	# - get version and locale -
	local VERSION=$(grep "wp_version = " $VERSIONPATH | cut -d \' -f2)
	local LOCALE=$(sudo -u "$SITEUSER" wp core language list --status=installed --path="$SITEPATH" | grep "installed" | cut -f1)
	
	# - maybe unlock core -
	if [ "$SITELOCKING" == "true" ]; then
		unlockcore
	fi

	# - clear new core temp directory -
	sudo -u "$SITEUSER" rm -rf "$NEWCOREPATH"
	sudo -u "$SITEUSER" mkdir "$NEWCOREPATH"
	
	# - download core -
	if [ -z "$LOCALE" ]; then
		OUTPUT=$(sudo -u "$SITEUSER" wp core download --version="$VERSION" --path="$NEWCOREPATH")
		yellow "***"; printf " Downloading New Core (version=$VERSION) for '"; green $SITENAME; echo "'..."
	else 
		OUTPUT=$(sudo -u "$SITEUSER" wp core download --version="$VERSION" --locale="$LOCALE" --path="$NEWCOREPATH")
		yellow "***"; printf " Downloading New Core (version=$VERSION, locale=$LOCALE) for '"; green $SITENAME; echo "'..."
	fi
	echo "$OUTPUT"
	
	# TODO: maybe define SUCCESS and use checkresult ?
	checkresult $OUTPUT $SUCCESS
	
	# - maybe retry core download -
	# if [ "$RESULT" == "failed" ]; then
	#	if [ -z "$LOCALE" ]; then
	#		OUTPUT=$(sudo -u "$SITEUSER" wp core download --version="$VERSION" --path="$NEWCOREPATH")
	#		yellow "***"; printf " Reinstalling Core (version=$VERSION) for '"; green $SITENAME; echo "'..."
	#	else 
	#		OUTPUT=$(sudo -u "$SITEUSER" wp core download --version="$VERSION" --locale="$LOCALE" --path="$NEWCOREPATH")
	#		yellow "***"; printf " Reinstalling Core (version=$VERSION, locale=$LOCALE) for '"; green $SITENAME; echo "'..."
	#	fi
	# fi

	if [ "$RESULT" == "success" ]; then

		# - output core syncing message -
		yellow "***"; printf "Syncing Downloaded Core to '"; green $SITEPATH; echo "'..."
	
		# - remove wp-content directory from temp core to prevent any overwriting -
		sudo -u "$SITEUSER" rm -rf "$NEWCOREPATH"/wp-content
	
		# - sync from temp dir to core dir -
		# TODO: maybe use with --backup option?
		sudo -u "$SITEUSER" rsync --delay-updates --remove-source-files -av "$NEWCOREPATH" "$SITEPATH"
		sudo -u "$SITEUSER" rm -rf "$NEWCOREPATH"
	fi
	
	# - maybe relock core -
	if [ "$SITELOCKING" == "true" ]; then
		lockcore
	fi
}

# --------- #
# Lock Core #
# --------- #
function lockcore {

	local INCLUDES=$SITEPATH"/wp-includes"
	local ADMIN=$SITEPATH"/wp-admin"
	
	# - output locking message -
	yellow "**"; printf " Locking "$SITEPATH; echo "..."
	
	# - lock core base files -
	# note: skip license.txt and readme.html
	BASEFILES=(".htaccess" "index.php" "wp-activate.php" "wp-blog-header.php" "wp-comments-post.php" "wp-config.php" "wp-config-sample.php" "wp-cron.php" "wp-links-opml.php" "wp-login.php" "wp-mail.php" "wp-settings.php" "wp-signup.php" "wp-trackback.php" "xmlrpc.php")
	for BASEFILE in "${BASEFILES[@]}"; do
		echo "$BASEFILE"
		if [ -e "$SITEPATH/$BASEFILE" ]; then
		 	sudo -u root chattr +i "$SITEPATH/$BASEFILE"
	 	fi
	done
	
	# - recursively lock wp-includes and wp-admin dirs -
	if [ -d "$INCLUDES" ]; then
		sudo -u root chattr -R +i "$INCLUDES"; fi
	if [ -d "$ADMIN" ]; then
		sudo -u root chattr -R +i "$ADMIN"; fi
}

# ----------- #
# Unlock Core #
# ----------- #
function unlockcore {

	local INCLUDES=$SITEPATH"/wp-includes"
	local ADMIN=$SITEPATH"/wp-admin"
	
	# - output unlock message -
	yellow "**"; printf " Unlocking "$SITEPATH; echo "..."
	
	# - unlock core base files -
	# note: skip license.txt and readme.html
	BASEFILES=(".htaccess" "index.php" "wp-activate.php" "wp-blog-header.php" "wp-comments-post.php" "wp-config.php" "wp-config-sample.php" "wp-cron.php" "wp-links-opml.php" "wp-login.php" "wp-mail.php" "wp-settings.php" "wp-signup.php" "wp-trackback.php" "xmlrpc.php")
	for BASEFILE in "${BASEFILES[@]}"; do
		echo "$BASEFILE"
		if [ -e "$SITEPATH/$BASEFILE" ]; then
		 	sudo -u root chattr -i "$SITEPATH/$BASEFILE"
		fi
	done
	
	# - recursively unlock wp-includes and wp-admin -
	if [ -d "$INCLUDES" ]; then
		sudo -u root chattr -R -i "$INCLUDES"; fi
	if [ -d "$ADMIN" ]; then
		sudo -u root chattr -R -i "$ADMIN"; fi
}

# --------------- #
# Check Core Lock #
# --------------- #
function checkcorelock {
	
	local INCLUDES=$SITEPATH"/wp-includes"
	local ADMIN=$SITEPATH"/wp-admin"
	# local LOCKFILE=$SITENAME".lok"
	
	# - output lock check message -
	yellow "**"; printf "Checking Core file locks for "; green $SITENAME; echo "..."
	
	# - check lock for core base files -
	# TODO: compare to core base file list
	# BASEFILES=(".htaccess" "index.php" "wp-activate.php" "wp-blog-header.php" "wp-comments-post.php" "wp-config.php" "wp-config-sample.php" "wp-cron.php" "wp-links-opml.php" "wp-login.php" "wp-mail.php" "wp-settings.php" "wp-signup.php" "wp-trackback.php" "xmlrpc.php")
	BASEFILES=$(lsattr -l $SITEPATH | grep " Immutable")
	# | tee $LOCKFILE
	echo $(echo -n "$BASEFILES" | grep -c '^') immutable base files
	
	# - check lock for wp-includes dir files -
	if [ -d "$INCLUDES" ]; then
		INCFILES=$(lsattr -R -l $INCLUDES | grep " Immutable")
		# | tee -a $LOCKFILE
		echo $(echo -n "$INCFILES" | grep -c '^') immutable includes files
	fi
	
	# - check lock for wp-admin dir files -
	if [ -d "$ADMIN" ]; then
		ADMINFILES=$(lsattr -R -l $ADMIN | grep " Immutable")
		# | tee -a $LOCKFILE
		echo $(echo -n "$ADMINFILES" | grep -c '^') immutable admin files
	fi
}

# ------------------------ #
# Check File Owners/Groups #
# ------------------------ #
function checkowners {

	# - check permissions -
	if [ -n "$SITEGROUP" ]; then
		# - check owner / group mismatches -
		yellow "*"; printf " Searching '"; green $SITENAME; echo "' for files with mismatching owner/group permissions..."
		OUTPUT=$(find "$SITEPATH" \( ! -user "$SITEUSER" -o ! -group "$SITEGROUP" \) )
	else 
		# - check for owner mismatches -
		yellow "*"; printf " Searching '"; green $SITENAME; echo "' for files with mismatching owner permissions..."
		OUTPUT=$(find "$SITEPATH" ! -user "$SITEUSER")
	fi
	echo "$OUTPUT"
}

# ---------------------- #
# Fix File Owners/Groups #
# ---------------------- #
function fixowners {
	
	# - maybe unlock core -
	if [ "$SITELOCKING" == "true" ]; then
		unlockcore
	fi
	
	# - fix permissions -
	if [ -n "$SITEGROUP" ]; then
		# - fix owner / group permissions -
		yellow "***"; printf " Fixing owner/group permissions on '"; green $SITENAME; echo "'..."
		chown -R "$SITEUSER":"$SITEGROUP" "$SITEPATH"

		# for BASEFILE in "${BASEFILES[@]}"; do
		# 	chown "$SITEUSER":"$SITEGROUP" "$SITEPATH"/"$BASEFILE
		# done
		# chown -R "$SITEUSER":"$SITEGROUP" "$SITEPATH"/wp-content
		# chown -R "$SITEUSER":"$SITEGROUP" "$SITEPATH"/wp-admin
		# chown -R "$SITEUSER":"$SITEGROUP" "$SITEPATH"/wp-includes
	else
		# - fix owner permissions -
		yellow "***"; printf " Fixing owner permissions on '"; green $SITENAME; echo "'..."
		chown -R "$SITEUSER" "$SITEPATH"
		
		# for BASEFILE in "${BASEFILES[@]}"; do
		# 	chown "$SITEUSER" "$SITEPATH"/"$BASEFILE
		# done
		# chown -R "$SITEUSER" "$SITEPATH"/wp-content
		# chown -R "$SITEUSER" "$SITEPATH"/wp-admin
		# chown -R "$SITEUSER" "$SITEPATH"/wp-includes
	fi

	# - maybe relock core -	
	if [ "$SITELOCKING" == "true" ]; then
		lockcore
	fi
}


# =============== #
# PLUGIN COMMANDS #
# =============== #

# ------------ #
# List Plugins #
# ------------ #
# [DEPRECATED] now uses checkplugins (re-formatted table) function

function listplugins {
	
	local PLUGIN=$1

	OUTPUT=$(sudo -u "$SITEUSER" wp plugin list --path="$SITEPATH" --skip-plugins)

	if [ -z "$PLUGIN" ]; then
	
		yellow "*"; printf " Listing all plugins for '"; green $SITENAME; echo "'..."
		echo "$OUTPUT"; echo ""
	
	else 
		if [[ $PLUGIN == *","* ]]; then
			IFS="," read -r -a PLUGINS <<< "$PLUGIN"
			for PLUGIN in "${PLUGINS[@]}"; do
				if [[ "$OUTPUT" == *"$PLUGIN"* ]]; then
					VERSION=$(grep "$PLUGIN" <<< "$OUTPUT" | awk '{print $4}');
					yellow "*"; printf " Plugin with slug "; cyan $PLUGIN; printf " found on site "; green $SITENAME; printf " ("; yellow $VERSION; echo ")"
				else 
					red "*"; printf " Plugin with slug "; cyan $PLUGIN; printf " not found on site "; green $SITENAME; echo ""
				fi
			done
		else 
			if [[ "$OUTPUT" == *"$PLUGIN"* ]]; then
				VERSION=$(grep "$PLUGIN" <<< "$OUTPUT" | awk '{print $4}');
				yellow "*"; printf " Plugin with slug "; cyan $PLUGIN; printf " found on site "; green $SITENAME; printf " ("; yellow $VERSION; echo ")"
			else 
				red "*"; printf " Plugin with slug "; cyan $PLUGIN; printf " not found on site "; green $SITENAME; echo ""
			fi
		fi
	fi
}

# ------------ #
# Check Plugin #
# ------------ #
function checkplugin {
	
	local PLUGIN=$1

	# - get plugin list -
	yellow "*"; printf " Checking for plugin(s) on "; green $SITENAME; echo ": "
	INFO=$(sudo -u "$SITEUSER" wp plugin list --fields=name,status,version,update,update_version --path="$SITEPATH" --skip-plugins | tail -n +2)

	# - check for empty / 'all' -
	if [ -z "$PLUGIN" ]; then
		PLUGIN="all"
	fi
	if [ "$PLUGIN" == "all" ]; then
		PLUGINS=()
		while IFS= read -r -a LINE; do
			PLUGINS+=($(awk '{print $1}' <<< $LINE))		
		done <<< "$INFO"
	else 
		IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	fi
	
	# - table headings -
	OUTPUT=""; 
	OUTPUT+=$(white "PLUGIN"); OUTPUT+="|"
	OUTPUT+=$(white "STATUS"); OUTPUT+="|"
	OUTPUT+=$(white "VERSION"); OUTPUT+="|"
	OUTPUT+=$(white "UPDATES"); OUTPUT+=$'\r\n'
		
	# - loop plugins -
	for PLUGIN in "${PLUGINS[@]}"; do
		OUTPUT+=$(cyan "$PLUGIN")
		PLUGININFO=$(grep "$PLUGIN" <<< "$INFO")
		if [ -n "$PLUGININFO" ]; then

			# split tabs while preserving columns
			# ref: https://stackoverflow.com/a/19726834/5240159
			if [[ "$PLUGININFO" != *$'\t' ]]; then PLUGININFO+=$'\t'; fi
			COLUMNS=()
			while IFS='' read -r -d$'\t' COLUMN; do
			   COLUMNS+=("$COLUMN")
			done <<< "$PLUGININFO"

			# - plugin status -
			OUTPUT+="|"
			if [ "${COLUMNS[1]}" == "active" ]; then
				OUTPUT+=$(green "Active")
			else
				if [ "${COLUMNS[1]}" == "must-use" ]; then
					OUTPUT+=$(magenta "Must Use")
				else
					OUTPUT+=$(blue "Inactive")
				fi
			fi

			# - plugin version -
			OUTPUT+="|"; 
			if [ -n "${COLUMNS[2]}" ]; then
				OUTPUT+=$(yellow "${COLUMNS[2]}")
			else 
				OUTPUT+="-"
			fi

			# - plugin updates -
			if [ "${COLUMNS[3]}" == "available" ]; then
				OUTPUT+="|"; OUTPUT+=$(yellow "${COLUMNS[4]}"); OUTPUT+=" available"
			fi
		else 	
			OUTPUT+="|"; OUTPUT+=$(red "Not Found")
		fi
		OUTPUT+=$'\r\n'
	done
	
	OUTPUT=$(column -t -s "|" <<< "$OUTPUT")
	echo "$OUTPUT"
}

# -------------- #
# Install Plugin #
# -------------- #
function installplugin {

	local PLUGIN=$1

	SUCCESS="Plugin installed successfully."
	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "***"; printf " Installing plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		OUTPUT=$(sudo -u "$SITEUSER" wp plugin install "$PLUGIN" --path="$SITEPATH" --skip-plugins)
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp plugin install "$PLUGIN" --path="$SITEPATH")
			checkresult $OUTPUT $SUCCESS
		fi
		echo "$OUTPUT"
	done
}

# --------------------------- #
# Install and Activate Plugin #
# --------------------------- #
function installactivateplugin {
	
	local PLUGIN=$1

	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "****"; printf " Installing and activating plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		installplugin $PLUGIN
		if [ "$RESULT" == "success" ]; then
			activateplugin $PLUGIN
		fi
	done
}

# ---------------- #
# Reinstall Plugin #
# ---------------- #
function reinstallplugin {
	
	local PLUGIN=$1

	# TODO: backup plugin before deleting? (as may have no valid install source?)

	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "****"; printf " Reinstalling plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		deleteplugin $PLUGIN
		if [ "$RESULT" == "success" ]; then
			installplugin $PLUGIN
		fi
	done
}

# ---------------- #
# Uninstall Plugin #
# ---------------- #
function uninstallplugin {
	
	local PLUGIN=$1
	
	SUCCESS="Uninstalled and deleted"
	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "***"; printf " Uninstalling plugin "; cyan $PLUGIN; printf " from "; green $SITENAME; echo "..."		
		OUTPUT=$(sudo -u "$SITEUSER" wp plugin uninstall "$PLUGIN" --path="$SITEPATH")
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp plugin uninstall "$PLUGIN" --path="$SITEPATH" --skip-plugins); fi
		echo "$OUTPUT"
	done
}

# --------------- #
# Activate Plugin #
# --------------- #
function activateplugin {
	
	local PLUGIN=$1
	
	SUCCESS="Success: Plugin"
	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "***"; printf " Activating plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		OUTPUT=$(sudo -u "$SITEUSER" wp plugin activate "$PLUGIN" --path="$SITEPATH" --skip-plugins)
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp plugin activate "$PLUGIN" --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
		fi
		echo "$OUTPUT"
	done
}

# ----------------- #
# Deactivate Plugin #
# ----------------- #
function deactivateplugin {
	
	local PLUGIN=$1

	SUCCESS="Success: Deactivated"
	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "***"; printf " Deactivating plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		OUTPUT=$(sudo -u "$SITEUSER" wp plugin deactivate "$PLUGIN" --path="$SITEPATH" --skip-plugins)
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp plugin deactivate "$PLUGIN" --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
		fi
		echo "$OUTPUT"
	done
}

# ------------- #
# Delete Plugin #
# ------------- #
function deleteplugin {
	
	local PLUGIN=$1

	SUCCESS="Success: Deleted"	
	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
		yellow "***"; printf " Deleting plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		OUTPUT=$(sudo -u "$SITEUSER" wp plugin delete "$PLUGIN" --path="$SITEPATH" --skip-plugins)
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			PLUGINPATH="$SITEPATH"wp-content/plugins/"$PLUGIN"
			if [ -d "$PLUGINPATH" ]; then
				rm -rf $PLUGINPATH			
				if [ -d "$PLUGINPATH" ]; then
					red "Failed"; printf ": Could not delete plugin "; cyan $PLUGIN; echo "."
					RESULT="failed"
				else 
					RESULT="success"; yellow "Manually Deleted plugin"; cyan #PLUGIN
				fi
			fi
		fi
	done
}

# ------------- #
# Update Plugin #
# ------------- #
function updateplugin {
	
	local PLUGIN=$1
	
	# TODO: handle alternate plugin update sources ?
	
	# TODO: handle minor/patch/version switches ?
	# ref: https://wordpress.stackexchange.com/questions/290018/can-i-upgrade-a-plugin-to-a-specific-version#290019	

	SUCCESS="Plugin updated successfully."
	if [ "$PLUGIN" == "all" ]; then
		updateallplugins
	else
		IFS="," read -r -a PLUGINS <<< "$PLUGIN"
		for PLUGIN in "${PLUGINS[@]}"; do
			yellow "***"; printf " Updating plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
			OUTPUT=$(sudo -u "$SITEUSER" wp plugin update "$PLUGIN" --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
			if [ "$RESULT" == "failed" ]; then
				OUTPUT=$(sudo -u "$SITEUSER" wp plugin update "$PLUGIN" --path="$SITEPATH" --skip-plugins)
				checkresult $OUTPUT $SUCCESS
			fi
			echo "$OUTPUT"
		done
	fi
}

# ------------------ #
# Update All Plugins #
# ------------------ #
function updateallplugins {
	
	# TODO: maybe add an update all confirmation prompt?
	yellow "****"; printf " Updating "; cyan "ALL"; printf " plugins on "; green $SITENAME; echo "..."
	
	OUTPUT=$(sudo -u "$SITEUSER" wp plugin update --all --path="$SITEPATH" --skip-plugins)

	# TODO: define success for all plugins updated?
	# SUCCESS=""
	# checkresult $OUTPUT $SUCCESS
	# if [ "$RESULT" == "failed" ]; then
	#	OUTPUT=$(sudo -u "$SITEUSER" wp plugin update --all --path="$SITEPATH"); 
	#	checkresult $OUTPUT $SUCCESS	
	# fi

	echo "$OUTPUT"
}


# ============== #
# THEME COMMANDS #
# ============== #

# ----------- #
# List Themes #
# ----------- #
function listthemes {

	local THEMES=$1

	yellow "*"; printf " Listing theme(s( for '"; green $SITENAME; echo "'..."
	# OUTPUT=$(sudo -u "$SITEUSER" wp theme list --path="$SITEPATH")
	# echo "$OUTPUT"; echo ""

	# - get all theme info -	
	INFO=$(sudo -u "$SITEUSER" wp theme list --fields=name,status,version,update,update_version --path="$SITEPATH" --skip-plugins | tail -n +2)

	# - check for empty / 'all' -
	if [ -z "$THEME" ]; then
		THEME="all"
	fi
	if [ "$THEME" == "all" ]; then
		THEMES=()
		while IFS= read -r -a LINE; do
			THEMES+=($(awk '{print $1}' <<< $LINE))		
		done <<< "$INFO"
	else 
		IFS="," read -r -a THEMES <<< "$THEME"
	fi

	# - table headings -
	OUTPUT=""; 
	OUTPUT+=$(white "THEME"); OUTPUT+="|"
	OUTPUT+=$(white "STATUS"); OUTPUT+="|"
	OUTPUT+=$(white "VERSION"); OUTPUT+="|"
	OUTPUT+=$(white "UPDATES"); OUTPUT+=$'\r\n'

	# - get template / stylesheet options -
	TEMPLATE=$(sudo -u "$SITEUSER" wp option get template --path="$SITEPATH" --skip-plugins)
	STYLESHEET=$(sudo -u "$SITEUSER" wp option get stylesheet --path="$SITEPATH" --skip-plugins)

	# - loop themes -
	for THEME in "${THEMES[@]}"; do
		OUTPUT+=$(cyan "$THEME")
		THEMEINFO=$(grep "$THEME" <<< "$INFO")
		if [ -n "$THEMEINFO" ]; then

			# split tabs while preserving columns
			# ref: https://stackoverflow.com/a/19726834/5240159
			if [[ "$THEMEINFO" != *$'\t' ]]; then THEMEINFO+=$'\t'; fi
			COLUMNS=()
			while IFS='' read -r -d$'\t' COLUMN; do
			   COLUMNS+=("$COLUMN")
			done <<< "$THEMEINFO"

			# - plugin status -
			OUTPUT+="|"
			if [ "${COLUMNS[1]}" == "active" ]; then
				OUTPUT+=$(green "Active")
			else
				OUTPUT+=$(blue "Inactive")
			fi

			# - plugin version -
			OUTPUT+="|"; 
			if [ -n "${COLUMNS[2]}" ]; then
				OUTPUT+=$(yellow "${COLUMNS[2]}")
			else 
				OUTPUT+="-"
			fi

			# - plugin updates -
			if [ "${COLUMNS[3]}" == "available" ]; then
				OUTPUT+="|"; OUTPUT+=$(yellow "${COLUMNS[4]}"); OUTPUT+=" available"
			fi
		else 	
			OUTPUT+="|"; OUTPUT+=$(red "Not Found")
		fi
		OUTPUT+=$'\r\n'
	done

	OUTPUT=$(column -t -s "|" <<< "$OUTPUT")
	echo "$OUTPUT"
}

# ----------- #
# Check Theme #
# ----------- #
function checktheme {
	
	local TEMPLATE; local TEMPLATEPATH; local TEMPLATEVERSION
	local STYLESHEET; local STYLEPATH; local STYLEVERSION
	
	# - get template and stylesheet options -
	TEMPLATE=$(sudo -u "$SITEUSER" wp option get template --path="$SITEPATH" --skip-plugins)
	STYLESHEET=$(sudo -u "$SITEUSER" wp option get stylesheet --path="$SITEPATH" --skip-plugins)
	
	if [ -n "$TEMPLATE" ]; then
	
		# - get template version from style.css -
		TEMPLATEPATH=$SITEPATH"wp-content/themes/"$TEMPLATE"/style.css"
		TEMPLATEVERSION=$(grep 'Version:' $TEMPLATEPATH | awk '{print $2}' | tr -d '\r')

		green $SITENAME;
		if [ "$TEMPLATE" == "$STYLESHEET" ]; then
			# - output theme version -
			printf " Theme: "; cyan $TEMPLATE; printf " "; yellow $TEMPLATEVERSION; printf " (No Parent/Child)"
			
			# - check if theme update is available -
			UPDATE=$(sudo -u "$SITEUSER" wp theme list -fields=name,update,update_version | grep "$TEMPLATE")
			AVAILABLE=$(awk '{print $2}' <<< "$UPDATE")
			if [ "$AVAILABLE" == 'available' ]; then
				VERSION=$(awk '{print $3}' <<< "$UPDATE")
				printf "(Update to "; yellow "$VERSION"; printf " available.)"
			fi
		else 
			# - output parent and child theme versions -
			STYLEPATH=$SITEPATH"wp-content/themes/"$STYLESHEET"/style.css"
			STYLEVERSION=$(grep 'Version:' $STYLEPATH | awk '{print $2}' | tr -d '\r')
			printf " - Child Theme "; cyan $STYLESHEET; printf " "; yellow $STYLEVERSION
			printf " - Parent Theme: "; cyan $TEMPLATE; printf " "; yellow $TEMPLATEVERSION
			
			# - check if theme updates are  available -
			UPDATES=$(sudo -u "$SITEUSER" wp theme list --fields=name,update,update_version)
			
			# - output message for parent theme update -
			UPDATE=$(grep "$TEMPLATE" <<< "$UPDATES")
			AVAILABLE=$(awk '{print $2}' <<< "$UPDATE")
			if [ "$AVAILABLE" == 'available' ]; then
				VERSION=$(awk '{print $3}' <<< "$UPDATE")
				echo ""; printf "Parent Theme Update to "; yellow "$VERSION"; printf " available."
			fi
			
			# - output message for child theme update -
			UPDATE=$(grep "$STYLESHEET" <<< "$UPDATES")
			AVAILABLE=$(awk '{print $2}' <<< "$UPDATE")
			if [ "$AVAILABLE" == 'available' ]; then
				VERSION=$(awk '{print $3}' <<< "$UPDATE")
				echo ""; printf "Child Theme Update to "; yellow "$VERSION"; printf " available."
			fi
		fi
		echo ""
	else
		red "Warning:"; printf " could not retrieve template option value for "; yellow $SITENAME; echo " "
	fi
}

# -------------- #
# Activate Theme #
# -------------- #
function activatetheme {
	local THEME=$1

	SUCCESS="Switched to"
	if [[ "$THEME" == *","* ]]; then
		red "Failed! You cannot activate multiple themes. Choose one!"; echo "";
	else 
		OUTPUT=$(sudo -u "$SITEUSER" wp theme activate "$THEME" --skip-plugins)
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp theme activate "$THEME" --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
		fi
		echo "$OUTPUT";
	fi
}

# ------------- #
# Install Theme #
# ------------- #
function installtheme {
	
	local THEMES=$1

	SUCCESS="Theme installed successfully."
	IFS="," read -r -a THEMESLUGS <<< "$THEMES"
	for THEME in "${THEMESLUGS[@]}"; do
		OUTPUT=$(sudo -u "$SITEUSER" wp theme install "$THEME" --path="$SITEPATH" --skip-plugins)
		checkresult $OUTPUT
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp theme install "$THEME" --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
		fi
	done
	echo "$OUTPUT";
}

# ---------------------- #
# Install Activate Theme #
# ---------------------- #
function installactivatetheme {
	local THEME=$1

	if [[ "$THEME" == *","* ]]; then
		red "Failed! You cannot activate multiple themes. Choose one!"; echo "";
	else 
		installtheme $THEME;

		if [ "$RESULT" == 'success' ]; then
			activatetheme $THEME;
		fi
	fi
}

# --------------- #
# Reinstall Theme #
# --------------- #
function reinstalltheme {
	
	local THEMES=$1

	IFS="," read -r -a THEMESLUGS <<< "$THEMES"
	for THEME in "${THEMESLUGS[@]}"; do
		THEMEPATH=$SITEPATH"wp-content/"$THEME"/"
		BACKUPPATH=$SITEPATH"wp-content/"$THEME"-backup/"
		rm -rf "$BACKUPPATH"
		mv "$THEMEPATH" "$BACKUPPATH"
		installtheme $THEME			
		# TODO: check for success and maybe restore backup
	done
}

# ------------ #
# Update Theme #
# ------------ #
function updatetheme {
	
	local THEMES=$1

	SUCCESS="Theme updated successfully."
	if [ "$THEMES" == "all" ]; then
		OUTPUT=$(sudo -u "$SITEUSER" wp theme update --all --path="$SITEPATH" --skip-plugins)
		checkresult $OUTPUT $SUCCESS
		if [ "$RESULT" == "failed" ]; then
			OUTPUT=$(sudo -u "$SITEUSER" wp theme update --all --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
		fi
	else
		IFS="," read -r -a THEMESLUGS <<< "$THEMES"
		for THEME in "${THEMESLUGS[@]}"; do
			OUTPUT=$(sudo -u "$SITEUSER" wp theme update "$THEME" --path="$SITEPATH" --skip-plugins)
			checkresult $OUTPUT $SUCCESS
			if [ "$RESULT" == "failed" ]; then
				OUTPUT=$(sudo -u "$SITEUSER" wp theme update "$THEME" --path="$SITEPATH" --skip-plugins); 
				checkresult $OUTPUT $SUCCESS
			fi
		done
	fi
	echo "$OUTPUT";
}


# ============= #
# SYNC COMMANDS #
# ============= #

# --------- #
# Sync Core #
# --------- #
function synccore {

	# - maybe unlock core -	
	if [ "$SITELOCKING" == "true" ]; then
		unlockcore
	fi

	local CORESLUG=$1
	local SOURCETYPE; local SOURCESLUG; local SOURCEPATH

	if [ -f "$SOURCESCONF" ]; then
	
		while IFS= read -a SOURCE || [ -n "$SOURCE" ]; do

			# - ignore lines starting with # -
			if [ ! "${SOURCE:0:1}" == "#" ]; then

				DATA=( $SOURCE )
				SOURCETYPE=${DATA[0]}
				SOURCESLUG=${DATA[1]}
				SOURCEPATH=$(echo ${DATA[2]} | tr -d '\r')

				if [ "$SOURCETYPE" == "core" ]; then

					# TODO: handle .zip source files?
					# if [ -f "$SOURCEPATH" ]; then
					#	if [ ?is-zip? $SOURCEPATH ]; then
					# 		COREZIP="true"
					#		...extract zip to a temp dir...
					#		SOURCEPATH=$TEMPDIR
					#	fi
					# fi

					# - sync core from source -
					if [ -d "$SOURCEPATH" ]; then
						if [ "$CORESLUG" == $SOURCESLUG ]; then
							# TODO: maybe use rsync --backup option?
							sudo -u "$SITEUSER" rsync -av --delay-updates "$SOURCEPATH" "$SITEPATH"
							RESULT="success"
						fi
					else
						# - output invalid source directory message -
						red "Warning: "; printf "Invalid source directory, check "; white "sources.conf"; printf " for "; yellow $SOURCESLUG; printf ". Skipping..."; echo " "
					fi

				fi
			fi
		done < $SOURCESCONF
	else
		# - output missing soures config file message -
		red "Error!"; white "sources.conf"; printf " file is required to Core Sync."; echo " "
	fi

	# - maybe relock core -
	if [ "$SITELOCKING" == "true" ]; then
		lockcore
	fi

}

# ----------- #
# Sync Plugin #
# ----------- #
function syncplugin {
	
	local SOURCETYPE; local SOURCESLUG; local SOURCEPATH; local PLUGINPATH
	local PLUGINS=$1; local DOSYNC="false"

	if [ -f "$SOURCESCONF" ]; then

		# - read file without requiring it to end in a new line -
		# ref: https://stackoverflow.com/a/31398490/5240159
		while IFS= read -a SOURCE || [ -n "$SOURCE" ]; do

			# - ignore lines starting with # -
			if [ ! "${SOURCE:0:1}" == "#" ]; then

				# - expand source data -
				DATA=($SOURCE)
				SOURCETYPE=${DATA[0]}
				SOURCESLUG=${DATA[1]}
				SOURCEPATH=$(echo ${DATA[2]} | tr -d '\r')

				if [ "$SOURCETYPE" == "plugin" ]; then

					# TODO: handle .zip source files?
					# if [ -f $SOURCEPATH ]; then
					#	if [ ?is-zip? $SOURCEPATH ]; then
					# 		PLUGINZIP="true"
					#		...extract zip to temp dir...
					#		SOURCEPATH=$TEMPDIR
					#	fi
					# fi

					if [ -d "$SOURCEPATH" ]; then

						DOSYNC="false"

						# - match plugin slugs -
						if [ "$PLUGINS" == "all" ]; then
							DOSYNC="true"; fi
						if [ "$PLUGINS" == "$SOURCESLUG" ]; then
							DOSYNC="true"; fi
						if [[ "$PLUGINS" == *","* ]]; then
							IFS="," read -r -a PLUGINSLUGS <<< "$PLUGINS"
							for PLUGIN in "${PLUGINSLUGS[@]}"; do
								if [ "$PLUGIN" == "$SOURCESLUG" ]; then
									DOSYNC="true"; 
								fi
							done
						fi

						if [ "$DOSYNC" == "true" ]; then
						
							# - maybe create plugin dir -
							PLUGINPATH=$SITEPATH"wp-content/plugins/"$SOURCESLUG"/"
							if [ ! -d "$PLUGINPATH" ]; then
								sudo -u "$SITEUSER" mkdir "$PLUGINPATH"
								chown "$SITEUSER" "$PLUGINPATH"
							fi

							# - output plugin sync message -
							printf "Syncing Plugin "; cyan $SOURCESLUG; printf " to site "; green $SITENAME; echo " "
							
							# - sync plugin from source -
							# TODO: maybe use rsync --backup option?
							sudo -u "$SITEUSER" rsync -av --delete --delay-updates "$SOURCEPATH" "$PLUGINPATH"

							# - output synced info -							
							printf "Plugin Path: "; cyan $SOURCEPATH; echo "";
							printf "Synced to: "; green $PLUGINPATH; echo " "
							
							RESULT="success"
						fi

					else
						# - output invalid source directory message -
						red "Warning: "; printf "Invalid source directory, check "; white "sources.conf"; printf " for "; yellow $SOURCESLUG; printf ". Skipping..."; echo " "
					fi

				fi
			fi
		done < $SOURCESCONF

		if [ "$RESULT" != "success" ]; then
			# - no matching plugin slug message -
			red "Error! "; printf "No matching plugin slug found, check "; white "sources.conf"; printf " for "; yellow $PLUGINS; echo "."
		fi

	else
		# - missing source config file message -
		red "Error!"; white "sources.conf"; printf " file is required to perform Plugin Sync."; echo " "
	fi
}

# ------------------------ #
# Sync and Activate Plugin #
# ------------------------ #
function syncactivateplugin {

	local PLUGIN=$1

	IFS="," read -r -a PLUGINS <<< "$PLUGIN"
	for PLUGIN in "${PLUGINS[@]}"; do
	
		# - output syncing and activating message -
		yellow "****"; printf " Syncing and activating plugin "; cyan $PLUGIN; printf " on "; green $SITENAME; echo "..."
		
		# - sync plugin -
		syncplugin $PLUGIN

		# - check syncing result before activating -
		if [ "$RESULT" == "success" ]; then
			# - activate plugin -
			activateplugin $PLUGIN
		else 
			# - output sync failed message -
			red "Failed!"; printf "Plugin "; cyan $PLUGIN; echo "not activated."
		fi

	done
}

# ---------- #
# Sync Theme #
# ---------- #
function synctheme {
	
	local SOURCETYPE; local SOURCESLUG; local SOURCEPATH; local THEMEPATH
	local THEMES=$1; local DOSYNC="false"

	if [ -f "$SOURCESCONF" ]; then
	
		# - read source config lines -
		while IFS= read -a SOURCE || [ -n "$SOURCE" ]; do

			# - ignore lines starting with # -
			if [ ! "${SOURCE:0:1}" == "#" ]; then
			
				# - expand source data -
				DATA=($SOURCE)
				SOURCETYPE=${DATA[0]}
				SOURCESLUG=${DATA[1]}
				SOURCEPATH=$(echo ${DATA[2]} | tr -d '\r')

				if [ "$SOURCETYPE" == "theme" ]; then

					# TODO: handle .zip source files?
					# if [ -f "$SOURCEPATH" ]; then
					#	if [ ?is-zip? $SOURCEPATH ]; then
					# 		THEMEZIP="true"
					#		...extract zip to temp dir...
					#		SOURCEPATH=$TEMPDIR
					#	fi
					# fi

					if [ -d "$SOURCEPATH" ]; then

						DOSYNC="false"

						# - match theme slugs -
						if [ "$THEMES" == "all" ]; then
							DOSYNC="true"; fi
						if [ "$THEMES" == $SOURCESLUG ]; then
							DOSYNC="true"; fi
						if [[ "$THEMES" == *","* ]]; then
							IFS="," read -r -a THEMESLUGS <<< "$THEMES"
							for THEME in "${THEMESLUGS[@]}"; do
								if [ "$THEME" == "$SOURCESLUG" ]; then
									DOSYNC="true"; 
								fi
							done
						fi

						if [ "$DOSYNC" == "true" ]; then
						
							# - maybe create theme dir -
							THEMEPATH=$SITEPATH"wp-content/themes/"$SOURCESLUG"/"
							if [ ! -d "$THEMEPATH" ]; then
								sudo -u "$SITEUSER" mkdir "$THEMEPATH"
								chown "$SITEUSER" "$THEMEPATH"
							fi

							# - output syncing theme message -
							printf "Syncing Theme "; cyan $SOURCESLUG; printf " to site "; green $SITENAME; echo " "

							# - sync theme from source -							
							# TODO: maybe use rsync --backup option?
							sudo -u "$SITEUSER" rsync -av --delete --delay-updates "$SOURCEPATH" "$THEMEPATH"

							# - output theme sync info -							
							printf "Theme Path: "; cyan $SOURCEPATH; echo "";
							printf "Synced to: "; green $THEMEPATH; echo " "
							
							RESULT="success"
						fi

					else
						# - output invalid source directory message -
						red "Warning: "; printf "Invalid source directory, check "; white "sources.conf"; printf " for "; yellow $SOURCESLUG; printf ". Skipping..."; echo " "
					fi

				fi
			fi
		done < $SOURCESCONF
		
		if [ "$RESULT" != "success" ]; then
			# - output no matching theme message -
			red "Error! "; printf "No matching theme slug found, check "; white "sources.conf"; printf " for "; yellow $THEMES; echo "."
		fi
		
	else
		# - output missing source config file message -
		red "Error! "; white "sources.conf"; printf " file is required to Theme Sync."; echo " "
	fi
}

# ----------------------- #
# Sync and Activate Theme #
# ----------------------- #
function syncactivatetheme {
	local THEME=$1;
	
	if [[ "$THEME" == *","* ]]; then
		red "Failed!"; printf "You cannot activate multiple themes. Choose one!"; echo "";
	else 
		synctheme $THEME;
		if [ "$RESULT" == 'success' ]; then
			activatetheme $THEME;
		fi
	fi
}

# -------------------- #
# Sync Must Use Plugin #
# -------------------- #
function syncmuplugin {
	
	local SOURCETYPE; local SOURCESLUG; local SOURCEPATH; local PLUGINPATH
	local PLUGINS=$1; local DOSYNC="false"

	if [ -f "$SOURCESCONF" ]; then

		# read file without requiring it to end in a new line
		# ref: https://stackoverflow.com/a/31398490/5240159
		while IFS= read -a SOURCE || [ -n "$SOURCE" ]; do

			# ignore lines starting with #
			if [ ! "${SOURCE:0:1}" == "#" ]; then

				DATA=( $SOURCE )
				SOURCETYPE=${DATA[0]}
				SOURCESLUG=${DATA[1]}
				SOURCEPATH=$(echo ${DATA[2]} | tr -d '\r')

				if [ "$SOURCETYPE" == "muplugin" ]; then

					# TODO: handle .zip source files?
					# if [ -f $SOURCEPATH ]; then
					#	if [ ?is-zip? $SOURCEPATH ]; then
					# 		PLUGINZIP="true"
					#		...extract zip to temp dir...
					#		SOURCEPATH=$TEMPDIR
					#	fi
					# fi

					if [ -d "$SOURCEPATH" ]; then

						DOSYNC="false"

						# - check slug match -
						if [ "$PLUGINS" == "all" ]; then
							DOSYNC="true"; fi
						if [ "$PLUGINS" == "$SOURCESLUG" ]; then
							DOSYNC="true"; fi
						if [[ "$PLUGINS" == *","* ]]; then
							IFS="," read -r -a PLUGINSLUGS <<< "$PLUGINS"
							for PLUGIN in "${PLUGINSLUGS[@]}"; do
								if [ "$PLUGIN" == "$SOURCESLUG" ]; then
									DOSYNC="true"; 
								fi
							done
						fi

						if [ "$DOSYNC" == "true" ]; then

							# - maybe create mu-plugin dir -
							PLUGINPATH=$SITEPATH"wp-content/mu-plugins/"
							if [ ! -d "$PLUGINPATH" ]; then
								sudo -u "$SITEUSER" mkdir "$PLUGINPATH"
								chown "$SITEUSER" "$PLUGINPATH"
							fi

							# - output syncing message -
							printf "Syncing Must-Use Plugin "; cyan $SOURCESLUG; printf " to site "; green $SITENAME; echo " "
							
							# - sync must use plugin -
							# TODO: maybe use rsync with --backup option?
							# note: do not use --delete option!
							sudo -u "$SITEUSER" rsync -av --delay-updates "$SOURCEPATH" "$PLUGINPATH"

							# - output extra info -							
							printf "Must Use Plugin Path: "; cyan $SOURCEPATH; echo "";
							printf "Synced to: "; green $PLUGINPATH; echo " "
							
							RESULT="success"
						fi

					else
						# - output invalid source directory message -
						red "Warning: "; printf "Invalid source directory, check "; white "sources.conf"; printf " for "; yellow $SOURCESLUG; printf ". Skipping..."; echo " "
					fi

				fi
			fi
		done < $SOURCESCONF

		if [ "$RESULT" != "success" ]; then
			# - output no matching slug message -
			red "Error! "; printf "No matching must-use plugin slug found, check "; white "sources.conf"; printf " for "; yellow $PLUGINS; echo "."
		fi

	else
		# - output missing source config file message -
		red "Error!"; white "sources.conf"; printf " file is required to perform Plugin Sync."; echo " "
	fi
}

# ------------ #
# Sync File(s) #
# ------------ #
# (relative to source directory)
function syncfile {
	
	local SOURCETYPE; local SOURCESLUG; local SOURCEPATH
	local FILES=$1; local DOSYNC="false"

	if [ -f "$SOURCESCONF" ]; then

		# - read file without requiring it to end in a new line -
		# ref: https://stackoverflow.com/a/31398490/5240159
		while IFS= read -a SOURCE || [ -n "$SOURCE" ]; do

			# - ignore lines starting with # -
			if [ ! "${SOURCE:0:1}" == "#" ]; then

				# - expand source data -
				DATA=($SOURCE)
				SOURCETYPE=${DATA[0]}
				SOURCESLUG=${DATA[1]}
				SOURCEPATH=$(echo ${DATA[2]} | tr -d '\r')

				if [ "$SOURCETYPE" == "file" ]; then

					# TODO: handle .zip source files?
					# if [ -f $SOURCEPATH ]; then
					#	if [ ?is-zip? $SOURCEPATH ]; then
					# 		PLUGINZIP="true"
					#		...extract zip to temp dir...
					#		SOURCEPATH=$TEMPDIR
					#	fi
					# fi

					if [ -d "$SOURCEPATH" ]; then

						DOSYNC="false"

						# - check slug match -
						if [ "$FILES" == "all" ]; then
							DOSYNC="true"; fi
						if [ "$FILES" == "$SOURCESLUG" ]; then
							DOSYNC="true"; fi
						if [[ "$FILES" == *","* ]]; then
							IFS="," read -r -a FILESLUGS <<< "$FILES"
							for FILE in "${FILESLUGS[@]}"; do
								if [ "$FILE" == "$SOURCESLUG" ]; then
									DOSYNC="true"; 
								fi
							done
						fi

						if [ "$DOSYNC" == "true" ]; then

							# - output syncing base relative files -
							printf "Syncing Base Relative Files "; cyan $SOURCESLUG; printf " to site "; green $SITENAME; echo " "
							
							# - sync base relative files -
							# TODO: maybe use rsync with --backup option?
							# note: do not use --delete option!
							sudo -u "$SITEUSER" rsync -av --delay-updates "$SOURCEPATH" "$SITEPATH"
							
							# - output extra info -
							printf "Source Base File Path: "; cyan $SOURCEPATH; echo "";
							printf "Synced to: "; green $SITEPATH; echo " "
							
							RESULT="success"
						fi

					else
						# - output invalid source directory message -
						red "Warning: "; printf "Invalid source directory, check "; white "sources.conf"; printf " for "; yellow $SOURCESLUG; printf ". Skipping..."; echo " "
					fi

				fi
			fi
		done < $SOURCESCONF

		if [ "$RESULT" != "success" ]; then
			# - output no slug match message -
			red "Error! "; printf "No matching base file slug found, check "; white "sources.conf"; printf " for "; yellow $FILES; echo "."
		fi

	else
		# - output no source config file found message -
		red "Error!"; white "sources.conf"; printf " file is required to perform Plugin Sync."; echo " "
	fi
}

# -----------------
# end all functions


# ====================== #
# COMMAND LINE ARGUMENTS #
# ====================== #

# [1] - check action argument -
if [ -z "$1" ]; then
	# - output valid commands message
	validcommands; exit 1
fi

# [2] - target site slugs -
if [ -z "$2" ]; then
	red "Specify target site(s)"; echo "... (or use 'all')"; exit 1
else 
	if [[ "$2" == *","* ]]; then
		# extract comma separated arguments for $2 to sitename slugs
		# ref: https://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash
		IFS="," read -r -a SITENAMES <<< "$2"
	fi
fi

# [3] - plugin slugs for plugin actions -
LISTACTIONS=("listplugins" "listplugin" "checkplugins" "checkplugin")
if [ "$1" != "updateallplugins" ]; then
	if [[ "$1" == *"plugin"* ]]; then
		if [ -z "$3" ]; then
			if [[ "${LISTACTIONS[@]}" =~ "$1" ]]; then
				SLUGS="all"
			else 			
				red "Error!"; printf " Specify plugin slug(s)"; echo "..."; exit 1
			fi
		else
			SLUGS=$3
		fi
	fi
fi

# [4] - theme slugs for theme actions -
LISTACTIONS=("listtheme" "listthemes" "checktheme" "checkthemes")
if [[ "$1" == *"theme"* ]]; then
	if [ -z "$3" ]; then
		if [[ "${LISTACTIONS[@]}" =~ "$1" ]]; then
			SLUGS="all"
		else
			red "Error!"; printf " Specify theme slug(s)"; echo "..."; exit 1
		fi	
	else
		SLUGS=$3
	fi
fi

# [5] - core slug (for core sync only) -
if [ "$1" == "synccore" ]; then
	SLUGS=$3
fi

# [6] - (optional) core version for core update -
if [ "$1" == "updatecore" ]; then
	SLUGS=$3
fi

# [7] - set slugs for file sync -
if [ "$1" == "syncfile" ]; then
	SLUGS=$3
fi


# ========== #
# LOOP SITES #
# ========== #

# - set current directory (to shell script path) -
# ref: https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# - check/set sites.conf path -
if [ -f $DIR"/sites.conf" ]; then
	SITESCONF=$DIR"/sites.conf"
	echo $DIR"/sites.conf found"
else
	if [ -f "/root/.wp-cli/sites.conf" ]; then
		SITESCONF="/root/.wp-cli/sites.conf"
	fi
fi
if [ -n "$SITESCONF" ]; then
	echo "Using sites file found at: $SITESCONF"
fi

# - check/set sources.conf path -
if [ -f $DIR"/sources.conf" ]; then
	SOURCESCONF=$DIR"/sources.conf"
else
	if [ -f "/root/.wp-cli/sources.conf" ]; then
		SOURCESCONF="/root/.wp-cli/sources.conf"
	fi
fi
if [ -n "$SOURCESCONF" ]; then
	echo "Using sources file found at: $SOURCESCONF"
fi

# - read site list file without requiring it to end in a new line -
# ref: https://stackoverflow.com/a/31398490/5240159
if [ -f "$SITESCONF" ]; then

	# - loop site config data -
	while IFS= read -a SITE || [ -n "$SITE" ]; do

		# - ignore lines starting with # -
		if [ ! "${SITE:0:1}" == "#" ]; then

			# - expand site data -
			DATA=( $SITE )
			SITENAME=${DATA[0]}
			SITEUSER=${DATA[1]}
			SITEGROUP=""
			
			# - maybe split off SITEUSER into SITEUSER:SITEGROUP -
			if [[ "$SITEUSER" == *":"* ]]; then
				IFS=":" read -r -a SITEINFO <<< "$SITEUSER"
				SITEDATA=( $SITEINFO )
				SITEUSER=${SITEINFO[0]}
				SITEGROUP=${SITEINFO[1]}
			fi

			SITEPATH=$(echo ${DATA[2]} | tr -d '\r')

			# - maybe set site locking flag -
			if [ "${SITEPATH:0:1}" == "*" ]; then
				SITEPATH=${SITEPATH:1}
				SITELOCKING="true"
			else 
				SITELOCKING="false"
			fi

			if [ -d "$SITEPATH" ]; then

				DO="false"

				# - check site slug match -
				if [ "$2" == "all" ]; then
					DO="true"; FOUND="true"
				fi
				if [ "$2" == $SITENAME ]; then
					DO="true"; FOUND="true"
				fi
				if [[ "$2" == *","* ]]; then
					for SITE in "${SITENAMES[@]}"; do
						if [ $SITE == $SITENAME ]; then
							DO="true"; FOUND="true"; 
						fi
					done
				fi

				# - check for matching command -
				if [ $DO == "true" ]; then

					## CORE COMMANDS ##

					if [ $1 == "checkversion" ]; then
						checkversion; DONE="true"; fi
					if [ $1 == "verifycore" ]; then
						verifycore; DONE="true"; fi
					if [ $1 == "updatecore" ]; then
						updatecore $SLUGS; DONE="true"; fi
					if [ $1 == "reinstallcore" ]; then
						reinstallcore; DONE="true"; fi
					if [ $1 == "lockcore" ]; then
						lockcore; DONE="true"; fi
					if [ $1 == "unlockcore" ]; then
						unlockcore; DONE="true"; fi
					if [ $1 == "checklock" ]; then
						checkcorelock; DONE="true"; fi
					if [ $1 == "checkcorelock" ]; then
						checkcorelock; DONE="true"; fi
					if [ $1 == "checkowners" ]; then
						checkowners; DONE="true"; fi
					if [ $1 == "checkpermissions" ]; then
						checkowners; DONE="true"; fi
					if [ $1 == "checkperms" ]; then
						checkowners; DONE="true"; fi
					if [ $1 == "fixowners" ]; then
						fixowners; DONE="true"; fi
					if [ $1 == "fixpermissions" ]; then
						fixowners; DONE="true"; fi
					if [ $1 == "fixperms" ]; then
						fixowners; DONE="true"; fi

					## PLUGIN COMMANDS ##

					if [ $1 == "listplugins" ]; then
						checkplugin $SLUGS; DONE="true"; fi
					if [ $1 == "listplugin" ]; then
						checkplugin $SLUGS; DONE="true"; fi						
					if [ $1 == "checkplugin" ]; then
						checkplugin $SLUGS; DONE="true"; fi
					if [ $1 == "checkplugins" ]; then
						checkplugins $SLUGS; DONE="true"; fi
					if [ $1 == "installactivateplugin" ]; then
						installactivateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "installactivateplugins" ]; then
						installactivateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "installplugins" ]; then
						installplugin $SLUGS; DONE="true"; fi
					if [ $1 == "installplugin" ]; then
						installplugin $SLUGS; DONE="true"; fi
					if [ $1 == "reinstallplugins" ]; then
						reinstallplugin $SLUGS; DONE="true"; fi
					if [ $1 == "reinstallplugin" ]; then
						reinstallplugin $SLUGS; DONE="true"; fi				
					if [ $1 == "uninstallplugin" ]; then
						uninstallplugin $SLUGS; DONE="true"; fi
					if [ $1 == "uninstallplugins" ]; then
						uninstallplugin $SLUGS; DONE="true"; fi
					if [ $1 == "activateplugin" ]; then
						activateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "activateplugins" ]; then
						activateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "deactivateplugin" ]; then
						deactivateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "deactivateplugins" ]; then
						deactivateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "deleteplugin" ]; then
						deleteplugin $SLUGS; DONE="true"; fi
					if [ $1 == "deleteplugins" ]; then
						deleteplugin $SLUGS; DONE="true"; fi
					if [ $1 == "updateplugin" ]; then
						updateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "updateplugins" ]; then
						updateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "updateallplugins" ]; then
						updateallplugins; DONE="true"; fi

					## THEME COMMANDS ## 

					if [ $1 == "listthemes" ]; then
						listthemes; DONE="true"; fi
					if [ $1 == "checktheme" ]; then
						checktheme; DONE="true"; fi
					if [ $1 == "checkthemes" ]; then
						checktheme; DONE="true"; fi
					if [ $1 == "activatetheme" ]; then
						activatetheme $SLUGS; DONE="true"; fi
					if [ $1 == "installtheme" ]; then
						installtheme $SLUGS; DONE="true"; fi
					if [ $1 == "installthemes" ]; then
						installtheme $SLUGS; DONE="true"; fi
					if [ $1 == "reinstalltheme" ]; then
						reinstalltheme $SLUGS; DONE="true"; fi
					if [ $1 == "reinstallthemes" ]; then
						reinstalltheme $SLUGS; DONE="true"; fi
					if [ $1 == "updatetheme" ]; then
						updatetheme $SLUGS; DONE="true"; fi
					if [ $1 == "updatethemes" ]; then
						updatetheme $SLUGS; DONE="true"; fi

					## SYNC COMMANDS ##

					if [ $1 == "synccore" ]; then
						synccore $SLUGS; DONE="true"; fi
					if [ $1 == "syncplugin" ]; then
						syncplugin $SLUGS; DONE="true"; fi
					if [ $1 == "syncplugins" ]; then
						syncplugin $SLUGS; DONE="true"; fi
					if [ $1 == "syncactivateplugin" ]; then
						syncactivateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "syncactivateplugins" ]; then
						syncactivateplugin $SLUGS; DONE="true"; fi
					if [ $1 == "synctheme" ]; then
						synctheme $SLUGS; DONE="true"; fi
					if [ $1 == "syncthemes" ]; then
						synctheme $SLUGS; DONE="true"; fi
					if [ $1 == "syncactivatetheme" ]; then
						syncactivatetheme $SLUGS; DONE="true"; fi
					if [ $1 == "syncmuplugin" ]; then
						syncmuplugin $SLUGS; DONE="true"; fi
					if [ $1 == "syncmuplugins" ]; then
						syncmuplugin $SLUGS; DONE="true"; fi
					if [ $1 == "syncfile" ]; then
						syncfile $SLUGS; DONE="true"; fi
					if [ $1 == "syncfiles" ]; then
						syncfile $SLUGS; DONE="true"; fi

				fi

			else
				# - output invalid site path message -
				red "Warning: Invalid path, check config for "; yellow $SITENAME; red ". Skipping"; echo "..."
			fi
		fi
	done < $SITESCONF

	if [ "$FOUND" == "false" ]; then
		# - output no site slug match message -
		red "Error! No site match found for "; yellow $2; red " in "; white "sites.conf"; echo " ..."
	else 
		if [ "$DONE" == "false" ]; then
			# - output valid command message -
			validcommands; exit 1		
		fi
	fi

else
	# - output no site config file message -
1	red "Error! No sites.conf file found!"; echo " Time to create one?"
fi

